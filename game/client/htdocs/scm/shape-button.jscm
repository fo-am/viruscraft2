;; -*- mode: scheme; -*-
;; ViruscraftII Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define num-shape-levels 7)

(define (make-shape-button x y w h shape level imgs imgs-active active clicked)
  (list x y w h shape level imgs imgs-active active clicked))

(define (build-shape-button x y shape)
  (make-shape-button
   x y 126 105 (string->symbol shape) 0
   (map (lambda (fn) (find-image (string-append "buttons/" fn)))
		(fn-list shape " grey"))
   (map (lambda (fn) (find-image (string-append "buttons/" fn)))
		(fn-list shape ""))
   0 #f))

(define (shape-button-x m) (list-ref m 0))
(define (shape-button-y m) (list-ref m 1))
(define (shape-button-w m) (list-ref m 2))
(define (shape-button-h m) (list-ref m 3))
(define (shape-button-shape m) (list-ref m 4))
(define (shape-button-level m) (list-ref m 5))
(define (shape-button-imgs m) (list-ref m 6))
(define (shape-button-imgs-active m) (list-ref m 7))
(define (shape-button-active m) (list-ref m 8))
(define (shape-button-clicked m) (list-ref m 9))

(define (shape-button-render m ctx)
  (ctx.drawImage
   (list-ref (shape-button-imgs m) (shape-button-level m))
   (shape-button-x m)
   (shape-button-y m))
  (set! ctx.globalAlpha (shape-button-active m))
  (ctx.drawImage
   (list-ref (shape-button-imgs-active m) (shape-button-level m))
   (shape-button-x m)
   (shape-button-y m))
  (set! ctx.globalAlpha 1.0))

(define (shape-button-update-mouse m state x y)
  (let ((clicked (and (eq? state "down")
		      (> x (shape-button-x m))
		      (< x (+ (shape-button-x m) (shape-button-w m)))
		      (> y (shape-button-y m))
		      (< y (+ (shape-button-y m) (shape-button-h m))))))				 
    (make-shape-button
     (shape-button-x m)
     (shape-button-y m)
     (shape-button-w m)
     (shape-button-h m)
     (shape-button-shape m)
     (shape-button-level m)
     (shape-button-imgs m) 
     (shape-button-imgs-active m) 
     (if clicked 1 (shape-button-active m))
     clicked)))

(define (shape-button-update-sensor m sensor-state)
  (let ((clicked (eq? sensor-state (shape-button-shape m))))
    (make-shape-button
     (shape-button-x m)
     (shape-button-y m)
     (shape-button-w m)
     (shape-button-h m)
     (shape-button-shape m)
     (shape-button-level m)
     (shape-button-imgs m) 
     (shape-button-imgs-active m) 
     (if clicked 1 (shape-button-active m))
     clicked)))

(define (shape-button-update m mixer time delta)
  (make-shape-button
   (shape-button-x m)
   (shape-button-y m)
   (shape-button-w m)
   (shape-button-h m)
   (shape-button-shape m)
   (floor (* (list-ref
			  (receptor-mixer-values mixer)
			  (cond
			   ((eq? (shape-button-shape m) 'tri) 0)
			   ((eq? (shape-button-shape m) 'squ) 1)
			   ((eq? (shape-button-shape m) 'cir) 2)
			   (else 3)))
			 (- num-shape-levels 1)))
   (shape-button-imgs m) 
   (shape-button-imgs-active m) 
   (* (shape-button-active m) 0.95)
   #f))

