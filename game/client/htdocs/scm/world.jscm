;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (make-world viruses hosts model receptor-mixer variant-id variant-virus variant-timer population-graph)
  (list viruses hosts model receptor-mixer variant-id variant-virus variant-timer population-graph))

(define (world-viruses w) (list-ref w 0))
(define (world-hosts w) (list-ref w 1))
(define (world-model w) (list-ref w 2))
(define (world-receptor-mixer w) (list-ref w 3))
(define (world-variant-id w) (list-ref w 4))
(define (world-variant-virus w) (list-ref w 5))
(define (world-variant-timer w) (list-ref w 6))
(define (world-population-graph w) (list-ref w 7))

(define virus-age-var 5)

(define (build-world player-id time)
  (let ((mixer (make-receptor-mixer)))
	(make-world
	 ;; we assume these become ordered lists because the ids increase?
	 (build-list
	  1
	  (lambda (_)
		(make-virus
		 (generate-receptors num-virus-receptors)
		 (* (rndf) (param "virus-max-age"))
		 )))
	 (build-list
	  (string->number (param "world-start-hosts"))
	  (lambda (_)
		(make-host
		 (vec2 (/ screen-width 2) (/ screen-height 2))
		 (mixer->receptors mixer)
		 )))
	 (build-model model-virus-popsize)
	 mixer
	 -1 ;; variant id
	 #f ;; variant virus
	 0  ;; varient timer
	 '() ;; pop graph
	 )))
  
(define (world-spawn-hosts host host-list count w)
  (cond
   ((zero? count) host-list)
   (else
    (world-spawn-hosts
     host
     (ordered-list-insert
      host-list
      (make-host
       (v2add
	(entity-pos host)
	(v2mul (rndcirc2d)
	       (param "host-spawn-radius")))
       ;; todo: get receptors from player
       (mixer->receptors (world-receptor-mixer w))
       ;;(host-receptors host)
       ))
     (- count 1)
     w))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; returns list of pairs of viruses and hosts
(define (world-infection-check virus-list host-list)
  ;; why is this distance wrong? 
  (let ((check-dist (/ (param "virus-size") 2)))
    (foldl
     (lambda (virus r)
       ;; viruses can only infect one host
       (if (not (eq? (virus-state virus) 'state-attached))
	   (foldl
	    (lambda (host r)
	      ;; hosts cannot be infected more than once
	      (if (not (host-virus host))
		  ;; if close enough
		  (if (and (< (v2dist (entity-pos virus) (entity-pos host))
			      check-dist)
			   ;; and compatible receptor check
			   (eq?
			    (choose (virus-receptors virus))
			    (choose (host-receptors host))))				  		      
		      ;; copy the host into the infection list
		      (cons (list (entity-id host) virus) r)
		      r)
		  r))
	    r
	    host-list)
	   r))
     '()
     virus-list)))

(define (world-find-attached-virus host-id infection-list)
  (foldl
   (lambda (li r)
     (if (and (not r) (eq? host-id (car li)))
	 (cadr li) ;; return virus
	 r))
   #f
   infection-list))

(define (world-virus-in-infection-list? virus-id infection-list)
  (foldl
   (lambda (li r)
     (if (and (not r) (eq? virus-id (entity-id (cadr li))))
	 #t r))
   #f
   infection-list))

(define (world-spawn-new-viruses w)
  (foldl
   (lambda (host r)
     ;; if it died with a virus
     (if (and (eq? (host-state host) 'state-died)
	      (host-virus host)
	      (< (length (world-viruses w)) (param "world-max-viruses")))
	 (append
	  r
	  (build-list
	   (param "virus-cell-spawn-count")
	   (lambda (_)
	     (make-virus-at
	      (v2add (rndcirc2d) (entity-pos host))
	      (model-hypothesis (world-model w)) (* (rndf) virus-age-var)))))
	 r))
   (world-viruses w)
   (world-hosts w)))

(define (world-virus-update w infection-list time delta)
  (foldl
   (lambda (virus r)     
     ;; remove if attached - the host will deal with it now
     (cond
      ;; a succesful infection
      ((world-virus-in-infection-list?
	(entity-id virus) infection-list) r)
      ;; death via old age
      ((eq? (virus-state virus) 'state-died) r)
      ;; normal update
      (else (append			 
			 (list (entity-update
					(virus-update
					 virus time delta w)
					delta))
			 r))))
   (if (< (length (world-viruses w)) (param "world-min-viruses"))
       ;; get receptors from model 
       (list (make-virus (model-hypothesis (world-model w)) (* (rndf) virus-age-var)))
       '())
   (world-spawn-new-viruses w)))

(define (world-host-update w infection-list time delta)
  (foldl
   (lambda (host r)
     (cond	  
      ;; cell division
      ((and (eq? (host-state host) 'state-divide)
	    (< (length (world-hosts w))
	       (param "host-max-population")))			   
       (world-spawn-hosts host r (param "host-spawn-count") w))
      ;; cell death
      ((eq? (host-state host) 'state-died) r)
      ;; normal update
      (else 
       (append
	r (list (entity-update
		 (host-update host time delta w
			      (world-find-attached-virus
			       (entity-id host)
			       infection-list))
		 delta))))))
   '()
   (world-hosts w)))

(define noisegen (js "new ClassicalNoise()"))

(define (world-fluid-vel pos time)
  (let ((np (vmul (vector (vx pos)
			  (vy pos)
			  (* time (param "fluid-speed")))
		  (param "fluid-scale"))))
    (let ((nx (noisegen.noise (vx np) (vy np) (vz np)))
	  (ny (noisegen.noise (+ (vx np) 102) (vy np) (vz np))))	   
      (v2mul (vec2 nx ny) (param "fluid-strength")))))

(define (world-bounds-vel pos)
  (v2mul
   (cond
	((< (vx pos) 0) (vec2 1 0))
	((> (vx pos) screen-width) (vec2 -1 0))
	((< (vy pos) 0) (vec2 0 1))
	((> (vy pos) screen-height) (vec2 0 -1))
	(else (vec2 0 0)))
   4))

(define (world-petri-vel pos)
  (let ((centre-vec
		 (v2sub pos (vec2 (/ screen-width 2) (/ screen-height 2)))))
	(if (> (v2mag centre-vec) (param "petri-radius"))
		(v2mul (v2normalise centre-vec) -4)
		(vec2 0 0))))

(define (world-update w time delta)
  (let ((infection-list (world-infection-check
						 (crop (shuffle (world-viruses w)) 10)
						 (crop (shuffle (world-hosts w)) 10)))
		(variant-id (model-variant-id (world-model w))))
    (make-world
     (world-virus-update w infection-list time delta)
     (world-host-update w infection-list time delta)
     (if (zero? (random (param "model-update-rate")))
		 (model-update (world-model w) (world-hosts w))
		 (world-model w))
     (world-receptor-mixer w)
	 ;; update the variant info if it has changed
	 variant-id	 
	 (if (not (eq? variant-id (world-variant-id w)))
		 (make-virus-at (vec2 1400 90) (model-variant (world-model w)) 0)
		 (world-variant-virus w))
	 (if (not (eq? variant-id (world-variant-id w)))
		 0
		 (+ (world-variant-timer w) delta))
	 (crop (cons (length (world-hosts w)) (world-population-graph w)) 1000) 
     )))

(define (world-update-mouse w state x y)
  w)

(define (world-receptor-button w receptor)
  (make-world
   (world-viruses w)
   (world-hosts w)
   (world-model w)
   (receptor-mixer-increase
    (world-receptor-mixer w)
    (cond
     ((eq? receptor 'triangle) 0)
     ((eq? receptor 'square) 1)
     ((eq? receptor 'donut) 2)
     (else 3)))
   (world-variant-id w)
   (world-variant-virus w)
   (world-variant-timer w)
   (world-population-graph w)))

(define (render-receptor-bar w x y i)
  (ctx.beginPath)
  (ctx.rect x y 20 100)
  (ctx.stroke)
  (let ((h (* 100 (list-ref (world-receptor-mixer w) i))))
	(ctx.fillRect x (- (+ 100 y) h) 20 h)))
  

(define (world-render w ctx time)
  (set! ctx.strokeStyle "#000")
  ;; draw the petri dish
  (set! ctx.lineWidth 3)
  (ctx.beginPath)
  (ctx.arc
   (/ screen-width 2)
   (/ screen-height 2)
   (param "petri-radius") 0 (* 2 Math.PI))
  (ctx.stroke) 
  (set! ctx.lineWidth 1)

  (for-each
   (lambda (e)
     (host-render e ctx))
   (world-hosts w))
  (for-each
   (lambda (e)
     (virus-render e ctx))
   (world-viruses w))
  
  ;; infection rate
  (set! ctx.fillStyle "#f00")
  (set! ctx.font "normal 20pt Dosis")
  (ctx.fillText "INFECTION LEVEL" 180 40) 
  (ctx.fillRect
   400 20
   (* 800 (/ (foldl
			  (lambda (host r)
				(if (host-virus host)
					(+ r 1) r))
			  0
			  (world-hosts w))
			 (length (world-hosts w))))
   20)							
  (ctx.beginPath)
  (ctx.rect 400 20 800 20)
  (ctx.stroke)

  (when (zero? (length (world-hosts w)))
		(set! ctx.fillStyle "#f00")
		(set! ctx.font "normal 80pt Dosis")
		(ctx.fillText "GAME OVER" 550 400))
  
  ;; render receptor type bars
  (set! ctx.fillStyle "#000")
  (render-receptor-bar w 250 130 0)
  (render-receptor-bar w 250 250 1)
  (render-receptor-bar w 250 370 2)
  (render-receptor-bar w 250 490 3)

  ;; population graph
  (set! ctx.fillStyle "#fff")
  (set! ctx.globalAlpha 0.8)
  (ctx.fillRect 1200 450 350 250)
  (set! ctx.globalAlpha 1.0)
  (ctx.beginPath)
  (ctx.rect 1200 450 350 250)
  (ctx.stroke)
  (set! ctx.fillStyle "#000")
  (set! ctx.font "normal 20pt Dosis")
  (ctx.fillText "POPULATION LEVEL" 1280 690) 
  (index-for-each
   (lambda (i pop)
	 (let ((pop (* pop 4)))
	   (ctx.fillRect
		(+ 1210 (/ i 3))
		(- 660 pop)
		1 pop)))
   (world-population-graph w))
  
  ;; new variant
  (set! ctx.fillStyle "#fff")
  (set! ctx.globalAlpha 0.8)
  (ctx.fillRect 1290 30 210 150)
  (set! ctx.globalAlpha 1.0)
  (ctx.beginPath)
  (ctx.rect 1290 30 210 150)
  (ctx.stroke)
  (set! ctx.fillStyle "#f00")
  (set! ctx.font "normal 20pt Dosis")
  (ctx.fillText "CURRENT VARIANT" 1300 170) 
 
  (when (world-variant-virus w)
		(virus-render (world-variant-virus w) ctx))
  
  
  )

(define (world-end-game-timer w)
  0)

(define (world-game-id w)
  0)
