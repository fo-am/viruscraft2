;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (make-world game-id viruses hosts models receptor-mixer variant-viruses level level-time level-params state infection-timer grace game-type mutator lives stage)
  (list game-id viruses hosts models receptor-mixer variant-viruses level level-time level-params state infection-timer grace game-type mutator lives stage))

(define (world-game-id w) (list-ref w 0))
(define (world-viruses w) (list-ref w 1))
(define (world-hosts w) (list-ref w 2))
(define (world-modify-hosts w s) (list-replace w 2 s))
(define (world-models w) (list-ref w 3))
(define (world-receptor-mixer w) (list-ref w 4))
(define (world-modify-receptor-mixer w s) (list-replace w 4 s))
(define (world-variant-viruses w) (list-ref w 5))
(define (world-level w) (list-ref w 6))
(define (world-level-time w) (list-ref w 7))
(define (world-modify-level-time w s) (list-replace w 7 s))
(define (world-level-params w) (list-ref w 8))
(define (world-state w) (list-ref w 9))
(define (world-modify-state w s) (list-replace w 9 s))
(define (world-infection-timer w) (list-ref w 10))
(define (world-grace w) (list-ref w 11))
(define (world-game-type w) (list-ref w 12))
(define (world-mutator w) (list-ref w 13))
(define (world-modify-mutator w s) (list-replace w 13 s))
(define (world-lives w) (list-ref w 14))
(define (world-stage w) (list-ref w 15))

(define virus-age-var 5)
(define info-text-display-duration 5)

(define stage-types (list "shape" "mutate" "multivariant" "hidden"))

(define (update-robot-virus shape-list)
  (let ((xhttp (js "new XMLHttpRequest()")))
    (xhttp.open "POST" "http://viruscraft.wlan:8889/shapes" true)
    (xhttp.setRequestHeader "Content-type" "text/plain")
    (xhttp.send
     (dbg (foldl (lambda (s r) (string-append r " " s)) "" shape-list)))))

(define (halt-pi)
  (let ((xhttp (js "new XMLHttpRequest()")))
    (xhttp.open "POST" "http://viruscraft.wlan:8889/halt" true)
    (xhttp.send)))

(define sensor-state "none")
(define sensor-state-debounced "none")
(define sensor-state-debounce #t)

(define (get-sensor-state)
  (let ((t sensor-state))
    (set! sensor-state "none")
    t))

(define (get-sensor-state-debounced)
  (when (not (eq? sensor-state sensor-state-debounced))
    (set! sensor-state-debounce #t))  
  (cond ((and sensor-state-debounce
	      (not (eq? sensor-state "none")))
	 (set! sensor-state-debounced sensor-state)
	 (set! sensor-state-debounce #f)
	 sensor-state)
	(else "none")))

(define (get-sensor-events)
  (msg "opening socket")
  (let ((socket (js "new WebSocket('ws://viruscraft.wlan:8890')")))
    (set! socket.onopen
	  (lambda (e)
	    (msg "sensor socket opened")))
    (set! socket.onmessage
	  (lambda (e)
	    (set! sensor-state e.data)))
    (set! socket.onclose
	  (lambda (e)
	    (msg "socket closed")))
    (set! socket.onerror
	  (lambda (e)
	    (msg "socket error")))))

(when installation-mode (get-sensor-events))
	    
(define (build-help-stack game-type stage time)
  (cond
   ((< (help-seen) stage)
	(inc-help-seen!)
	;; the first time we autotrigger help 
	(build-help game-type time))
   (else '())))

(define first-update #t)

(define (build-world stage level game-id time lives)
  (let ((game-type (list-ref stage-types stage)))
	(play-sound "start.wav")
	(set! first-update #t)
	(reset-scores!)
	;; auto trigger the help if we haven't seen it yet
	(set! help-stack (build-help-stack game-type stage time))
	(let ((mixer (make-receptor-mixer game-type))
		  (level-params (generate-level-params level)))
	  (let ((models (if (or (eq? game-type "hidden")
							(eq? game-type "multivariant"))
						(list
						 (build-model
						  model-virus-popsize
						  (level-params-model-update-rate level-params)
						  0 model-virus-mutation-rate)
						 (build-model
						  model-virus-popsize
						  (level-params-model-update-rate level-params)
						  (/ (level-params-model-update-rate level-params)
							 2)
						  model-virus-mutation-rate))
						(list
						 (build-model
						  model-virus-popsize
						  (level-params-model-update-rate level-params)
						  0 model-virus-mutation-rate)))))
		
		(make-world
		 game-id
		 ;; we assume these become ordered lists because the ids increase?
		 (build-list
		  1
		  (lambda (_)
			(make-virus
			 (* (rndf) (param "virus-max-age"))
			 )))
		 (build-list
		  (string->number (param "world-start-hosts"))
		  (lambda (_)
			(make-host
			 (vec2 (/ screen-width 2) (/ screen-height 2))
			 (mixer->receptors mixer)
			 )))
		 models
		 mixer
		 (index-map
		  (lambda (i m)
			(make-virus-with-receptors
			 (vec2 1400 (+ (* i 350) 200)) 0
			 (build-list num-virus-receptors (lambda (_) 'tri))))
		  models)	 
		 level ;; level
		 0 ;; level-time
		 level-params
		 "state-running" ;; state
		 0 ;; infection timer
		 #t ;; grace
		 game-type
		 (build-mutator game-type)
		 lives ;; lives
		 stage
		 )))))

(define (world-spawn-hosts host host-list count w)
  (cond
   ((zero? count) host-list)
   (else
	(update-scores-hosts-spawned! 1)
    (world-spawn-hosts
     host
     (ordered-list-insert
      host-list
      (make-host
       (v2add
		(entity-pos host)
		(v2mul (rndcirc2d)
			   (param "host-spawn-radius")))
       (mixer->receptors (world-receptor-mixer w))
       ))
     (- count 1)
     w))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; returns list of pairs of viruses and hosts
(define (world-infection-check virus-list host-list variant)
  ;; why is this distance wrong? 
  (let ((check-dist (/ (param "virus-size") 2)))
    (foldl
     (lambda (virus r)
       ;; viruses can only infect one host
       (if (not (eq? (virus-state virus) 'state-attached))
	   (foldl
	    (lambda (host r)
	      ;; hosts cannot be infected more than once
	      (if (not (host-virus host))
			  ;; if close enough
			  (if (and (< (v2dist (entity-pos virus) (entity-pos host))
						  check-dist)
					   ;; and compatible receptor check
					   (eq?
						;; there is only one set of receptors - the model's
						(choose variant)
						(choose (host-receptors host))))				  		      
				  ;; copy the host into the infection list
				  (cons (list (entity-id host) virus) r)
				  r)
			  r))
	    r
	    host-list)
	   r))
     '()
     virus-list)))

(define (world-find-attached-virus host-id infection-list)
  (foldl
   (lambda (li r)
     (if (and (not r) (eq? host-id (car li)))
	 (cadr li) ;; return virus
	 r))
   #f
   infection-list))

(define (world-virus-in-infection-list? virus-id infection-list)
  (foldl
   (lambda (li r)
     (if (and (not r) (eq? virus-id (entity-id (cadr li))))
	 #t r))
   #f
   infection-list))

(define (world-spawn-new-viruses w)
  (foldl
   (lambda (host r)
     ;; if it died with a virus
     (if (and (eq? (host-state host) 'state-died)
	      (host-virus host))
	 (append
	  r
	  (build-list
	   (param "virus-cell-spawn-count")
	   (lambda (_)
		 (update-scores-viruses-spawned! 1)
	     (make-virus-at
	      (v2add (rndcirc2d) (entity-pos host))
	      (* (rndf) virus-age-var)))))
	 r))
   (world-viruses w)
   (world-hosts w)))

(define (world-virus-update w infection-list time delta)
  (crop
   (foldl
	(lambda (virus r)     
	  ;; remove if attached - the host will deal with it now
	  (cond
	   ;; a succesful infection
	   ((world-virus-in-infection-list?
		 (entity-id virus) infection-list)
		(update-scores-infections! 1)
		r)
	   ;; death via old age
	   ((eq? (virus-state virus) 'state-died) r)
	   ;; normal update
	   (else (append			 
			  (list (entity-update
					 (virus-update
					  virus time delta (world-viruses w))
					 delta))
			  r))))
	(if (< (length (world-viruses w))
		   (level-params-min-viruses (world-level-params w)))
		(list (make-virus (* (rndf) virus-age-var)))
		'())
	(world-spawn-new-viruses w))
   (param "world-max-viruses")))

(define (world-host-update w infection-list time delta)
  (foldl
   (lambda (host r)
     (cond	  
      ;; cell division
      ((and (eq? (host-state host) 'state-divide)
	    (< (length (world-hosts w))
	       (param "host-max-population")))
	   (cons
		(entity-update
		 (host-update host time delta (world-hosts w)
					  (world-find-attached-virus
					   (entity-id host)
					   infection-list))
		 delta)
		(world-spawn-hosts host r (param "host-spawn-count") w)))
      ;; cell death
      ((eq? (host-state host) 'state-died) r)
      ;; normal update
      (else 
       (append
		r (list (entity-update
				 (host-update host time delta (world-hosts w)
							  (world-find-attached-virus
							   (entity-id host)
							   infection-list))
				 delta))))))
   '()
   (world-hosts w)))

(define (world-decimate-hosts w p)
  (if (world-grace w)
	  w
	  (world-modify-hosts
	   w (filter
		  (lambda (h) (> (rndf) (/ (* p p) 5)))
		  (world-hosts w)))))

(define noisegen (js "new ClassicalNoise()"))

(define (world-fluid-vel pos time)
  (let ((np (vmul (vector (vx pos)
						  (vy pos)
						  (* time (param "fluid-speed")))
				  (param "fluid-scale"))))
    (let ((nx (noisegen.noise (vx np) (vy np) (vz np)))
		  (ny (noisegen.noise (+ (vx np) 102) (vy np) (vz np))))	   
      (v2mul (vec2 nx ny) (param "fluid-strength")))))

(define (world-bounds-vel pos)
  (v2mul
   (cond
	((< (vx pos) 100) (vec2 1 0))
	((> (vx pos) (- screen-width panel-width 200)) (vec2 -1 0))
	((< (vy pos) 100) (vec2 0 1))
	((> (vy pos) (- screen-height 200)) (vec2 0 -1))
	(else (vec2 0 0)))
   4))

(define (world-petri-vel pos)
  (let ((centre-vec
		 (v2sub pos (vec2 (/ screen-width 2) (/ screen-height 2)))))
	(if (> (v2mag centre-vec) (param "petri-radius"))
		(v2mul (v2normalise centre-vec) -4)
		(vec2 0 0))))

(define (world-centre-vel pos)
  (let ((centre-vec
		 (v2sub pos (vec2 (/ screen-width 2) (/ screen-height 2)))))
	(v2mul (v2normalise centre-vec) -0.5)))

(define (world-update-state w time delta)
  (let ((state (world-state w)))
	(when (not (eq? state "state-running"))
		  (set! help-stack '()))  
	(cond
	 ((eq? state "state-running")
	  (cond 
	   ((zero? (length (world-hosts w)))
		(update-scores-duration! (world-level-time w))
		(update-scores-final-hosts! (length (world-hosts w)))
		(update-scores-final-viruses! (length (world-viruses w)))
		(play-sound "life-lost.wav")
		(world-modify-level-time		
		 (world-modify-state w "state-game-over")
		 0)) 
	   ((> (world-level-time w) (param "world-level-time"))
		(update-scores-duration! (world-level-time w)) 
		(update-scores-survived! #t)
		(update-scores-final-hosts! (length (world-hosts w)))
		(update-scores-final-viruses! (length (world-viruses w)))
		(world-modify-level-time
		 (world-modify-state
		  w (if (>= (world-level w) (param "world-num-levels"))
				(if (or (>= (world-stage w) (- (length stage-types) 1))
						installation-mode)
					"state-game-complete"
					(begin
					  (play-sound "stage-complete.wav")
					  "state-stage-complete"))
				(begin
				  (play-sound "level-complete.wav")
				  "state-level-complete")))
		 0))
	   (else w)))	 
	 ((eq? state "state-level-complete")
	  (if (> (world-level-time w) info-text-display-duration)
		  (world-modify-state w "state-new-level")
		  w))
	 ((eq? state "state-stage-complete")
	  (if (> (world-level-time w) info-text-display-duration)
		  (world-modify-state w "state-new-stage")
		  w))
	 ((eq? state "state-game-complete")
	  (if (> (world-level-time w) info-text-display-duration)
		  (world-modify-state w "state-exit")
		  w))
	 ((eq? state "state-new-level")
	  (world-modify-state w "state-running"))
	 ((eq? state "state-new-stage")
	  (world-modify-state w "state-running"))
	 ((eq? state "state-game-over")
	  (if (> (world-level-time w) info-text-display-duration)
		  (world-modify-state 
		   w (if (< (world-lives w) 1)
				 "state-exit"
				 "state-restart-level"))
		  w))	 
	 (else w))))

(define (world-update w time delta)
  (update-scores-max-hosts! (length (world-hosts w)))
  (update-scores-max-viruses! (length (world-viruses w)))
  (set! help-stack (help-bubble-stack-update help-stack time))

  (let ((model (choose (world-models w))))
	(let ((infection-list
		   (if (and (not (world-grace w))
					(< (world-infection-timer w) 0))
			   (world-infection-check
				(world-viruses w) ;; (crop (shuffle (world-viruses w)) 10)
				(world-hosts w)   ;; (crop (shuffle (world-hosts w)) 10)
				;; pick randomly from the models we have for multiple variants
				(model-variant model))
			   '()))
		  ;; pre-update the models as js is doing something here I don't like
		  (models
		   (if (eq? (world-state w) "state-running")
			   (map (lambda (m) (model-update m (world-hosts w) delta)) (world-models w))
			   (world-models w))))
	  
	  (world-update-sensor
	   time
	  (world-update-state 
	   (make-world
		(world-game-id w)
		(world-virus-update w infection-list time delta)
		(if (eq? (world-state w) "state-running")
			(world-host-update w infection-list time delta)
			(world-hosts w))
		models
		(if (or (eq? (world-game-type w) "shape")
				(eq? (world-game-type w) "multivariant"))
			(world-receptor-mixer w)
			(receptor-mixer-decrease-power
			 (world-receptor-mixer w) delta))
		;; update the variant(s) if they have changed
		(index-map2
		 (lambda (i m v)
		   (cond
		    ((model-new-variant? m)
			 (when (not first-update)
				   (play-sound "mutate.wav"))
			 (set! first-update #f)
		     (when installation-mode (update-robot-virus (model-variant m)))
		     (make-virus-with-receptors (vec2 1400 (+ (* i 350) 200)) 0 (model-variant m)))
		    (else v)))
		 models
		 (world-variant-viruses w))
		(world-level w)
		(+ (world-level-time w) delta)
		(world-level-params w)
		(world-state w)
		(if (> (world-infection-timer w) 0)
			(- (world-infection-timer w) delta)
			(param "world-infection-period"))
		(if (not (world-grace w))
			#f
			(if (> (length (world-hosts w)) 3) #f #t))
		(world-game-type w)
		(mutator-update
		 (world-mutator w)
		 (world-receptor-mixer w) time delta)
		(world-lives w)
		(world-stage w))
	   time delta)))))

(define (world-update-mouse w state x y time)
  (let ((mutator (mutator-update-mouse (world-mutator w) state x y)))
	(world-modify-mutator 
	 (if (mutator-event mutator)
		 (world-receptor-button w (mutator-event mutator) time)
		 w)
	 mutator)))

(define (world-update-sensor time w)
  (if installation-mode
	  (let ((mutator (mutator-update-sensor (world-mutator w) (get-sensor-state))))
		(world-modify-mutator 
		 (if (mutator-event mutator)
			 (world-receptor-button w (mutator-event mutator) time)
			 w)
		 mutator))
	  w))

(define (world-receptor-button w receptor time)
  (cond
   ((or (eq? (world-game-type w) "shape")
		(eq? (world-game-type w) "multivariant"))
	(update-scores-mutations! 0.2) ;; one complete up/down ~= 1 mutation 
	(let ((m (receptor-mixer-increase
			  (world-receptor-mixer w)
			  (cond
			   ((eq? receptor 'tri) 0)
			   ((eq? receptor 'squ) 1)
			   ((eq? receptor 'cir) 2)
			   (else 3)))))
	  ;; check for the help system gui full condition...
	  (when (and (not (null? help-stack))
				 (list-equal? (receptor-mixer-values m) (list 0 0 0 1)))
			(set! help-stack (help-bubble-stack-trigger help-stack 'guitar time)))
	  (world-modify-receptor-mixer w m)))
   (else
	(update-scores-mutations! 1)
	(world-modify-receptor-mixer
	 w (receptor-mixer-mutate
		(world-receptor-mixer w))))))

(define (render-receptor-bar w x y i)
  (ctx.beginPath)
  (ctx.rect x y 20 100)
  (ctx.stroke)
  (let ((h (* 100 (list-ref (receptor-mixer-values
							 (world-receptor-mixer w)) i))))
	(ctx.fillRect x (- (+ 100 y) h) 20 h)))

(define panel-col "#f2f2f2")
(define bg-col "#e3e2db")
(define panel-width (if installation-mode 0 400))
(define help-stack '())    

(define (render-message text)
  (set! ctx.font "normal 80pt Dosis")
  (let ((m (ctx.measureText text)))
	(let ((x (- (/ screen-width 2) (+ (/ m.width 2) 30)))
		  (y 150)
		  (w (+ m.width 60))
		  (h 200))
	  (set! ctx.globalAlpha 0.5)
	  (set! ctx.fillStyle panel-col)  
	  (ctx.fillRect 0 y screen-width h)  
	  (set! ctx.globalAlpha 1.0)
	  (set! ctx.fillStyle "#000")  
	  (ctx.fillText text (+ x 30) (- (+ y h) 50)))))

(define (render-explanation title text)
  (set! ctx.font "normal 80pt Dosis")
  (let ((m (ctx.measureText title)))
	(let ((x (- (/ screen-width 2) (+ (/ m.width 2) 30)))
		  (y 180)
		  (w (+ m.width 60))
		  (h 120))
	  (set! ctx.globalAlpha 0.5)
	  (set! ctx.fillStyle panel-col)  
	  (ctx.fillRect 0 0 screen-width screen-height)  
	  (set! ctx.globalAlpha 1.0)
	  (set! ctx.fillStyle "#000")  
	  (ctx.fillText title (+ x 30) (- (+ y h) 20))))
  (set! ctx.font "normal 40pt Dosis")
  (wrap-text ctx text 0 350 1000 60))


(define (world-render w ctx time)
  ;;(set! ctx.fillStyle bg-col)
  ;;(ctx.fillRect 0 0 (- screen-width panel-width) screen-height)

  (set! ctx.strokeStyle "#000")
  (set! ctx.fillStyle "#000")

  ;; (ctx.beginPath)
  ;; (ctx.rect 100 100
  ;; 			(- screen-width panel-width 200)
  ;; 			(- screen-height 200))
  ;; (ctx.stroke)

  (for-each
   (lambda (e)
     (host-render e ctx))
   (world-hosts w))
  (for-each
   (lambda (e)
     (virus-render e ctx))
   (world-viruses w))

  (when (eq? (world-state w) "state-running")
		(mutator-render (world-mutator w) ctx))

  (set! ctx.font "normal 30pt Dosis")
  (when (eq? (world-state w) "state-running")
		(ctx.fillText (string-append "TIME: " (trunc (- (param "world-level-time") (world-level-time w)))) 30 60)
;;		(ctx.fillText (string-append "POINTS: " (trunc (scores-total))) 30 110)
		(ctx.fillText (string-append "LIVES: " (+ (world-lives w) 1)) 30 110)
		(when
		 installation-mode
		 (ctx.fillText (string-append "LEVEL: " (world-level w) "/" (param "world-num-levels")) 30 160)))
  
  
  ;; variant
  (when (and (not installation-mode)
			 (eq? (world-state w) "state-running"))
		(set! ctx.fillStyle panel-col)
		(ctx.fillRect (- screen-width panel-width) 0 panel-width screen-height)
		(index-for-each2
		 (lambda (i model variant)
		   (let ((y (+ (* i 350) 100))
				 (mutation-time (- (model-period model) (model-timer model))))
			 (when (< mutation-time 1)
				   (set! ctx.globalAlpha (- 1 mutation-time))
				   (ctx.drawImage (find-image "sprites/host/infected.png")
								  1300 (+ 0 y))
				   (set! ctx.globalAlpha 1))
			 (set! ctx.fillStyle "#000")
			 (set! ctx.font "normal 30pt Dosis")
			 (ctx.fillText "Current virus:" 1300 (+ -10 y))  
			 (when variant
				   (if (eq? (world-game-type w) "hidden")
					   (virus-render-question variant ctx)
					   (virus-render-receptors variant ctx)))
			 ;; only show this when it's gonna happen before end of level
			 (when (< (model-timer model) (- (param "world-level-time") (world-level-time w))) 
				   (ctx.fillText
					(string-append "Next mutation: "
								   (trunc (model-timer model)))
					1280 (+ 230 y)))
			 ))
		 (world-models w)
		 (world-variant-viruses w)))
  
  (when (eq? (world-state w) "state-game-over")
		(cond
		 ((< (world-lives w) 1)
		  (render-explanation "GAME OVER" (get-scores-analysis (world-stage w))))
		 (else
		  (render-explanation
		   (string-append (world-lives w)
						  (if (eq? 1 (world-lives w))
							  " LIFE LEFT"
							  " LIVES LEFT"))
		   (get-scores-analysis (world-stage w))))))

  (when (eq? (world-state w) "state-level-complete")
		(render-explanation
		 (string-append "LEVEL " (world-level w) " COMPLETE!")
		 (get-scores-analysis (world-stage w))))

  (when (eq? (world-state w) "state-stage-complete")		
		(render-explanation
		 (string-append "STAGE " (+ (world-stage w) 2) " UNLOCKED!")
		 (string-append "You can now try "
						(cond
						 ((eq? (world-stage w) 0) "mutating your hosts!")
						 ((eq? (world-stage w) 1) "playing against multiple virus variants!")
						 (else "playing against a virus you cannot see!")))))
						 


  (when (eq? (world-state w) "state-game-complete")		
		(render-explanation
		 (string-append "WELL DONE: GAME COMPLETED!")
		 (get-scores-analysis (world-stage w))))
  
  (when (and
		 (eq? (world-state w) "state-running")
		 (> (world-level-time w) (- (param "world-level-time") 5)))
		(let ((secs
			   (+ (trunc
				   (- (param "world-level-time")
					  (world-level-time w))) 1)))		  
		  (render-message (string-append
						   "ONLY " secs (if (eq? 1 secs)
											" SECOND TO GO!" 
											" SECONDS TO GO!")))))
  
  (render-bubble-stack! help-stack ctx))

(define (world-end-game-timer w)
  0)

(define (world-game-id w)
  0)

