;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (make-world viruses hosts models receptor-mixer variant-viruses level level-time level-params state infection-timer grace game-type mutator)
  (list viruses hosts models receptor-mixer variant-viruses level level-time level-params state infection-timer grace game-type mutator))

(define (world-viruses w) (list-ref w 0))
(define (world-hosts w) (list-ref w 1))
(define (world-modify-hosts w s) (list-replace w 1 s))
(define (world-models w) (list-ref w 2))
(define (world-receptor-mixer w) (list-ref w 3))
(define (world-modify-receptor-mixer w s) (list-replace w 3 s))
(define (world-variant-viruses w) (list-ref w 4))
(define (world-level w) (list-ref w 5))
(define (world-level-time w) (list-ref w 6))
(define (world-modify-level-time w s) (list-replace w 6 s))
(define (world-level-params w) (list-ref w 7))
(define (world-state w) (list-ref w 8))
(define (world-modify-state w s) (list-replace w 8 s))
(define (world-infection-timer w) (list-ref w 9))
(define (world-grace w) (list-ref w 10))
(define (world-game-type w) (list-ref w 11))
(define (world-mutator w) (list-ref w 12))
(define (world-modify-mutator w s) (list-replace w 12 s))

(define virus-age-var 5)

(define (build-world game-type level player-id time)
  (reset-scores!)
  (let ((mixer (make-receptor-mixer game-type))
		(level-params (generate-level-params level)))
	(let ((models (if (or (eq? game-type "hidden")
						  (eq? game-type "multivariant"))
					  (list
					   (build-model
						model-virus-popsize
						(level-params-model-update-rate level-params)
						0 model-virus-mutation-rate)
					   (build-model
						model-virus-popsize
						(level-params-model-update-rate level-params)
						(/ (level-params-model-update-rate level-params)
						   2)
						model-virus-mutation-rate))
					  (list
					   (build-model
						model-virus-popsize
						(level-params-model-update-rate level-params)
						0 model-virus-mutation-rate)))))
	
	(make-world
	 ;; we assume these become ordered lists because the ids increase?
	 (build-list
	  1
	  (lambda (_)
		(make-virus
		 (* (rndf) (param "virus-max-age"))
		 )))
	 (build-list
	  (string->number (param "world-start-hosts"))
	  (lambda (_)
		(make-host
		 (vec2 (/ screen-width 2) (/ screen-height 2))
		 (mixer->receptors mixer)
		 )))
	 models
	 mixer
	 (index-map
	   (lambda (i m)
		 (make-virus-with-receptors
		  (vec2 1400 (+ (* i 300) 190)) 0
		  (build-list num-virus-receptors (lambda (_) 'tri))))
	   models)	 
	 level ;; level
	 0 ;; level-time
	 level-params
	 (if (< level 11)
		 "state-running" ;; state
		 ;; todo: game complete
		 "state-restart-game")
	 0 ;; infection timer
	 #t ;; grace
	 game-type
	 (build-mutator game-type)
	 ))))

(define (world-spawn-hosts host host-list count w)
  (cond
   ((zero? count) host-list)
   (else
	(update-scores-hosts-spawned! 1)
    (world-spawn-hosts
     host
     (ordered-list-insert
      host-list
      (make-host
       (v2add
		(entity-pos host)
		(v2mul (rndcirc2d)
			   (param "host-spawn-radius")))
       (mixer->receptors (world-receptor-mixer w))
       ))
     (- count 1)
     w))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; returns list of pairs of viruses and hosts
(define (world-infection-check virus-list host-list variant)
  ;; why is this distance wrong? 
  (let ((check-dist (/ (param "virus-size") 2)))
    (foldl
     (lambda (virus r)
       ;; viruses can only infect one host
       (if (not (eq? (virus-state virus) 'state-attached))
	   (foldl
	    (lambda (host r)
	      ;; hosts cannot be infected more than once
	      (if (not (host-virus host))
			  ;; if close enough
			  (if (and (< (v2dist (entity-pos virus) (entity-pos host))
						  check-dist)
					   ;; and compatible receptor check
					   (eq?
						;; there is only one set of receptors - the model's
						(choose variant)
						(choose (host-receptors host))))				  		      
				  ;; copy the host into the infection list
				  (cons (list (entity-id host) virus) r)
				  r)
			  r))
	    r
	    host-list)
	   r))
     '()
     virus-list)))

(define (world-find-attached-virus host-id infection-list)
  (foldl
   (lambda (li r)
     (if (and (not r) (eq? host-id (car li)))
	 (cadr li) ;; return virus
	 r))
   #f
   infection-list))

(define (world-virus-in-infection-list? virus-id infection-list)
  (foldl
   (lambda (li r)
     (if (and (not r) (eq? virus-id (entity-id (cadr li))))
	 #t r))
   #f
   infection-list))

(define (world-spawn-new-viruses w)
  (foldl
   (lambda (host r)
     ;; if it died with a virus
     (if (and (eq? (host-state host) 'state-died)
	      (host-virus host))
	 (append
	  r
	  (build-list
	   (param "virus-cell-spawn-count")
	   (lambda (_)
		 (update-scores-viruses-spawned! 1)
	     (make-virus-at
	      (v2add (rndcirc2d) (entity-pos host))
	      (* (rndf) virus-age-var)))))
	 r))
   (world-viruses w)
   (world-hosts w)))

(define (world-virus-update w infection-list time delta)
  (crop
   (foldl
	(lambda (virus r)     
	  ;; remove if attached - the host will deal with it now
	  (cond
	   ;; a succesful infection
	   ((world-virus-in-infection-list?
		 (entity-id virus) infection-list)
		(update-scores-infections! 1)
		r)
	   ;; death via old age
	   ((eq? (virus-state virus) 'state-died) r)
	   ;; normal update
	   (else (append			 
			  (list (entity-update
					 (virus-update
					  virus time delta w)
					 delta))
			  r))))
	(if (< (length (world-viruses w))
		   (level-params-min-viruses (world-level-params w)))
		(list (make-virus (* (rndf) virus-age-var)))
		'())
	(world-spawn-new-viruses w))
   (param "world-max-viruses")))

(define (world-host-update w infection-list time delta)
  (foldl
   (lambda (host r)
     (cond	  
      ;; cell division
      ((and (eq? (host-state host) 'state-divide)
	    (< (length (world-hosts w))
	       (param "host-max-population")))
	   (cons
		(entity-update
		 (host-update host time delta w
					  (world-find-attached-virus
					   (entity-id host)
					   infection-list))
		 delta)
		(world-spawn-hosts host r (param "host-spawn-count") w)))
      ;; cell death
      ((eq? (host-state host) 'state-died) r)
      ;; normal update
      (else 
       (append
		r (list (entity-update
				 (host-update host time delta w
							  (world-find-attached-virus
							   (entity-id host)
							   infection-list))
				 delta))))))
   '()
   (world-hosts w)))

(define (world-decimate-hosts w p)
  (if (world-grace w)
	  w
	  (world-modify-hosts
	   w (filter
		  (lambda (h) (> (rndf) (/ (* p p) 5)))
		  (world-hosts w)))))

(define noisegen (js "new ClassicalNoise()"))

(define (world-fluid-vel pos time)
  (let ((np (vmul (vector (vx pos)
						  (vy pos)
						  (* time (param "fluid-speed")))
				  (param "fluid-scale"))))
    (let ((nx (noisegen.noise (vx np) (vy np) (vz np)))
		  (ny (noisegen.noise (+ (vx np) 102) (vy np) (vz np))))	   
      (v2mul (vec2 nx ny) (param "fluid-strength")))))

(define (world-bounds-vel pos)
  (v2mul
   (cond
	((< (vx pos) 0) (vec2 1 0))
	((> (vx pos) screen-width) (vec2 -1 0))
	((< (vy pos) 0) (vec2 0 1))
	((> (vy pos) screen-height) (vec2 0 -1))
	(else (vec2 0 0)))
   4))

(define (world-petri-vel pos)
  (let ((centre-vec
		 (v2sub pos (vec2 (/ screen-width 2) (/ screen-height 2)))))
	(if (> (v2mag centre-vec) (param "petri-radius"))
		(v2mul (v2normalise centre-vec) -4)
		(vec2 0 0))))

(define (world-centre-vel pos)
  (let ((centre-vec
		 (v2sub pos (vec2 (/ screen-width 2) (/ screen-height 2)))))
	(v2mul (v2normalise centre-vec) -0.5)))

(define (world-update-state w time delta)
  (let ((state (world-state w)))
	(cond
	 ((eq? state "state-running")
	  (cond 
	   ((zero? (length (world-hosts w)))
		(update-scores-duration! (world-level-time w)) 
		(update-scores-final-hosts! (length (world-hosts w)))
		(update-scores-final-viruses! (length (world-viruses w)))
		(world-modify-level-time
		 (world-modify-state w "state-game-over")
		 0))
	   ((> (world-level-time w) (param "world-level-time"))
		(update-scores-duration! (world-level-time w)) 
		(update-scores-survived! #t)
		(update-scores-final-hosts! (length (world-hosts w)))
		(update-scores-final-viruses! (length (world-viruses w)))
		(world-modify-level-time
		 (world-modify-state w "state-level-complete")
		 0))
	   (else w)))	 
	 ((eq? state "state-level-complete")
	  (if (> (world-level-time w) 10)
		  (world-modify-state w "state-new-level")
		  w))
	 ((eq? state "state-new-level")
	  (world-modify-state w "state-running"))
	 ((eq? state "state-game-over")
	  (if (> (world-level-time w) 10)
		  (world-modify-state w "state-restart-game")
		  w))	 
	 (else w))))


(define (world-update w time delta)
  (update-scores-max-hosts! (length (world-hosts w)))
  (update-scores-max-viruses! (length (world-viruses w)))
  (let ((model (choose (world-models w))))
	(let ((infection-list
		   (if (and (not (world-grace w))
					(< (world-infection-timer w) 0))
			   (world-infection-check
				(world-viruses w) ;; (crop (shuffle (world-viruses w)) 10)
				(world-hosts w)   ;; (crop (shuffle (world-hosts w)) 10)
				;; pick randomly from the models we have for multiple variants
				(model-variant model))
			   '()))
		  ;; pre-update the models as js is doing something here I don't like
		  (models
		   (if (eq? (world-state w) "state-running")
			   (map (lambda (m) (model-update m (world-hosts w) delta)) (world-models w))
			   (world-models w))))
	  
	  (world-update-state 
	   (make-world
		(if (eq? (world-state w) "state-running")
			(world-virus-update w infection-list time delta)
			(world-viruses w))
		(if (eq? (world-state w) "state-running")
			(world-host-update w infection-list time delta)
			(world-hosts w))
		models
		(if (eq? (world-game-type w) "shape")
			(world-receptor-mixer w)
			(receptor-mixer-decrease-power
			 (world-receptor-mixer w) delta))
		;; update the variant(s) if they have changed
		(index-map2
		 (lambda (i m v)
		   (if (model-new-variant? m)
			   (make-virus-with-receptors (vec2 1400 (+ (* i 300) 190)) 0 (model-variant m))
			   v))
		 models
		 (world-variant-viruses w))
		(world-level w)
		(+ (world-level-time w) delta)
		(world-level-params w)
		(world-state w)
		(if (> (world-infection-timer w) 0)
			(- (world-infection-timer w) delta)
			(param "world-infection-period"))
		(if (not (world-grace w))
			#f
			(if (> (length (world-hosts w)) 2) #f #t))
		(world-game-type w)
		(mutator-update
		 (world-mutator w)
		 (world-receptor-mixer w) time delta))
	   time delta))))

(define (world-update-mouse w state x y)
  (let ((mutator (mutator-update-mouse (world-mutator w) state x y)))
	(world-modify-mutator 
	 (if (mutator-event mutator)
		 (world-receptor-button w (mutator-event mutator))
		 w)
	 mutator)))

(define (world-receptor-button w receptor)
  (cond
   ((eq? (world-game-type w) "shape")
	(update-scores-mutations! 0.2) ;; one complete up/down ~= 1 mutation 
	(world-modify-receptor-mixer
	   w (receptor-mixer-increase
		  (world-receptor-mixer w)
		  (cond
		   ((eq? receptor 'tri) 0)
		   ((eq? receptor 'squ) 1)
		   ((eq? receptor 'cir) 2)
		   (else 3)))))
   (else
	(update-scores-mutations! 1)
	(world-modify-receptor-mixer
	 w (receptor-mixer-mutate
		(world-receptor-mixer w))))))

(define (render-receptor-bar w x y i)
  (ctx.beginPath)
  (ctx.rect x y 20 100)
  (ctx.stroke)
  (let ((h (* 100 (list-ref (receptor-mixer-values
							 (world-receptor-mixer w)) i))))
	(ctx.fillRect x (- (+ 100 y) h) 20 h)))

(define (render-message text)
  (set! ctx.font "normal 80pt Dosis")
  (let ((m (ctx.measureText text)))
	(let ((x (- (/ screen-width 2) (+ (/ m.width 2) 30)))
		  (y 150)
		  (w (+ m.width 60))
		  (h 120))
;;	  (set! ctx.fillStyle "#fff")
;;	  (ctx.fillRect x y w h)  
;;	  (ctx.beginPath)
;;	  (ctx.rect x y w h)
;;	  (set! ctx.strokeStyle "#000")
;;	  (ctx.stroke)
;;	  (set! ctx.fillStyle "#000")
	  (ctx.fillText text (+ x 30) (- (+ y h) 20)))))

(define (render-explanation text)
  (set! ctx.font "normal 40pt Dosis")
  (wrap-text ctx text 0 350 1000 50))

(define panel-col "#f2f2f2")
(define bg-col "#e3e2db")
(define panel-width 400)

(define (world-render w ctx time)

  (set! ctx.fillStyle bg-col)
  (ctx.fillRect 0 0 (- screen-width panel-width) screen-height)
  (set! ctx.fillStyle panel-col)
  (ctx.fillRect (- screen-width panel-width) 0 panel-width screen-height)

  (set! ctx.strokeStyle "#000")
  (set! ctx.fillStyle "#000")

  (for-each
   (lambda (e)
     (host-render e ctx))
   (world-hosts w))
  (for-each
   (lambda (e)
     (virus-render e ctx))
   (world-viruses w))

  (mutator-render (world-mutator w) ctx)

  (set! ctx.font "normal 30pt Dosis")
  (when (eq? (world-state w) "state-running")
		(ctx.fillText (string-append "TIME: " (trunc (- (param "world-level-time") (world-level-time w)))) 30 60))

  (ctx.fillText (string-append "POINTS: " (trunc (scores-total))) 30 110)
  
  (when (eq? (world-state w) "state-game-over")
		(render-message "GAME OVER")
		(render-explanation (get-scores-analysis)))

  (when (eq? (world-state w) "state-level-complete")
		(render-message (string-append "LEVEL " (world-level w) " COMPLETE!"))
		(render-explanation (get-scores-analysis)))

  (when (and
		 (eq? (world-state w) "state-running")
		 (> (world-level-time w) (- (param "world-level-time") 5)))
		(render-message (string-append "ONLY " (trunc (- (param "world-level-time") (world-level-time w)))
									   " SECONDS TO GO!")))

  ;; variant
  (index-for-each2
   (lambda (i model variant)
	 (let ((y (+ (* i 300) 100))
		   (mutation-time (- (model-period model) (model-timer model))))
	   (when (< mutation-time 1)
			 (set! ctx.globalAlpha (- 1 mutation-time))
			 (ctx.drawImage (find-image "sprites/host/infected.png")
							1300 (+ 0 y))
			 (set! ctx.globalAlpha 1))
	   (set! ctx.fillStyle "#000")
	   (set! ctx.font "normal 30pt Dosis")
	   (ctx.fillText "Current virus:" 1300 (+ -10 y))  
	   (when variant
			 (if (eq? (world-game-type w) "hidden")
				 (virus-render variant ctx)
				 (virus-render-receptors variant ctx)))
	   (ctx.fillText
		(string-append "Next mutation: "
					   (trunc (model-timer model)))
		1280 (+ 230 y)) 
	   ))
   (world-models w)
   (world-variant-viruses w))
  
  )

(define (world-end-game-timer w)
  0)

(define (world-game-id w)
  0)
