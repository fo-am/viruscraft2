;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define virus-animation-idle 0)

(define virus-animation
  (list
   (make-anim-move "virus" "small-virus" '() (list "") 0 (vec2 0 0))
   ))

(define virus-variant-animation
  (list
   (make-anim-move "virus" "virus-capsid" '() (list "") 0 (vec2 0 0))))

(define (make-virus age)
  (make-virus-at (virus-start-pos) age))

(define (make-virus-at pos age)
  (append
   (make-entity
    (generate-entity-id!)
    "virus"
    pos 0 (vec2 128 128) "left" (rndf)
    (anim-load-frames "0" virus-animation)
    0 virus-animation-idle 0 0 pos #f 0 age (vec2 0 0))
   (list 'state-idle #f)))

(define (virus-receptor-filenames)
  (map
   (lambda (n)
	 (string-append "sprites/virus/" n))
   (list 
	"1_cir.png" "1_gui.png" "1_squ.png" "1_tri.png"
	"2_cir.png" "2_gui.png" "2_squ.png" "2_tri.png"
	"3_cir.png" "3_gui.png" "3_squ.png" "3_tri.png"
	"4_cir.png" "4_gui.png" "4_squ.png" "4_tri.png"
	"5_cir.png" "5_gui.png" "5_squ.png" "5_tri.png")))


(define (make-virus-with-receptors pos age receptors)
  (append
   (make-entity
    (generate-entity-id!)
    "virus"
    pos 0 (vec2 128 128) "left" (rndf)
    (anim-load-frames "0" virus-variant-animation)
    0 virus-animation-idle 0 0 pos #f 0 age (vec2 0 0))
   (list
    'state-idle
    (receptors-paint
     (index-map
      (lambda (i r)
		(find-image (string-append "sprites/virus/" (+ i 1) "_" r ".png")))
      receptors) #t))))

(define (virus-state v) (list-ref v (+ entity-size 0)))
(define (virus-modify-state v s) (list-replace v (+ entity-size 0) s))
(define (virus-receptor-image v) (list-ref v (+ entity-size 1)))

(define (virus-start-pos)
  (vec2 (+ (* (crndf) 100) (/ screen-width 2)) -10))

;; todo: refactor with host version
(define (virus-shove v virus-list)
  (let ((virus-size (param "virus-size")))
    (foldl
     (lambda (virus r)
       (if (eq? (entity-id virus) (entity-id v))
	   r
	   (let ((v (v2sub (entity-pos virus) (entity-pos v))))
	     (if (< (v2mag v) virus-size)
		 (v2add (v2mul (v2normalise v) -1) r)
		 r))))
     (vec2 0 0)
     virus-list)))

;; not needed?
(define (virus-check-hosts v host-list)
  (let ((check-dist (+ (param "virus-size")
		       (param "host-cell-size"))))
    (foldl
     (lambda (host r)
       (if (and (not r)
		(< (v2dist (entity-pos virus) (entity-pos v))
		   check-dist))
	   host r))
     #f
     host-list)))

(define (virus-update v time delta world)	  
  (let ((state (virus-state v)))
    (entity-modify-pos
     (entity-modify-timer
      ;; the viruses state machine...
      (cond
       ((eq? state 'state-idle)
	(if (> (entity-timer v) (param "virus-max-age"))
	    (host-modify-state (entity-modify-timer v 0) 'state-died)
	    v))
       ((eq? state 'state-died) v) 
       (else v))

      (+ (entity-timer v) delta))

     ;; update the position
     (v2add
      (entity-pos v)	    
      (v2add
	   (world-centre-vel (entity-pos v))
	   (v2add
		(v2add
		 (virus-shove v (world-viruses world))
		 (world-fluid-vel (entity-pos v) time))	       
		(world-bounds-vel (entity-pos v))))))))

(define (virus-render v ctx)
  (entity-render v ctx))

(define (virus-render-question e ctx)
  (entity-render e ctx)  
  (let ((posx (+ (- (vx (entity-pos e)) 150)
				 (vx (entity-offset e))))
		(posy (+ (- (vy (entity-pos e)) 150)
				 (vy (entity-offset e)))))
	(ctx.drawImage (find-image "sprites/virus/question.png") posx posy)))


(define (virus-render-receptors v ctx)
  (entity-render v ctx)  
  (ctx.save)
  (ctx.translate
   (+ (- (vx (entity-pos v)) 150) (vx (entity-offset v)))
   (+ (- (vy (entity-pos v)) 150) (vy (entity-offset v))))       
  (ctx.drawImage (virus-receptor-image v) 0 0)
  (ctx.restore))
    
