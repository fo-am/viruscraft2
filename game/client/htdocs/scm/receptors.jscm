;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define receptor-shapes (list 'tri 'squ 'cir 'gui))
(define num-virus-receptors (param "virus-receptor-count"))
(define num-host-receptors (param "host-receptor-count"))

(define (generate-receptors size)
  (build-list
   size
   (lambda (_)
     (choose receptor-shapes))))

(define (mutate-receptors receptors rate)
  (map
   (lambda (r)
     (if (< (random 10000) (* rate 100))
         (choose receptor-shapes)
         r))
   receptors))

(define (receptor-count receptor receptors)
  (foldl
   (lambda (r v)
     (if (eq? r receptor) (+ v 1) v))
   0 receptors))

(define (receptor-histogram receptors)
  (map
   (lambda (shape)
     (receptor-count shape receptors))
   receptor-shapes))
   
(define (receptors-paint receptor-images is-a-virus)
  (let ((tcanv (document.createElement "canvas")))
    (set! tcanv.width 300)
    (set! tcanv.height 300)    
    (let ((tctx (tcanv.getContext "2d")))
      (index-for-each
       (lambda (i ri)
      	 (tctx.drawImage ri 0 0)
      	 )
       receptor-images)
      (tctx.restore))
    tcanv))  

;;------------------------------------------------------------------

(define (make-receptor-mixer game-type)
  (list game-type
		(if (eq? game-type "shape")
			(list 1 0 0 0)
			(build-list num-host-receptors (lambda (_) 'tri)))
		0))

(define (receptor-mixer-game-type m) (list-ref m 0))
(define (receptor-mixer-values m) (list-ref m 1))
(define (receptor-mixer-modify-values m s) (list-replace m 1 s))
(define (receptor-mixer-power m) (list-ref m 2))
(define (receptor-mixer-modify-power m s) (list-replace m 2 s))

(define (receptor-mixer-normalise m)
  (receptor-mixer-modify-values
   m (let ((max (foldl
				 (lambda (v r)
				   (if (> v r) v r))
				 0
				 (receptor-mixer-values m))))
	   (map (lambda (v) (/ v max)) (receptor-mixer-values m)))))

(define mixer-minimum 0.05)

(define (receptor-mixer-clamp m)
  (receptor-mixer-modify-values
   m (map
	  (lambda (p)
		(if (< p mixer-minimum) 0 p))
	  (receptor-mixer-values m))))
  
(define (receptor-mixer-increase m n)
  (receptor-mixer-normalise
   (receptor-mixer-modify-values
	m (index-map
	   (lambda (i r)
		 (max mixer-minimum (if (eq? n i)
								(* r 1.2)
								(/ r 1.2))))
	   (receptor-mixer-values m)))))

(define (receptor-mixer-mutate m)
  (receptor-mixer-modify-power
   (receptor-mixer-modify-values
	m (index-map
	   (lambda (i r)
		 (if (< (rndf) 0.5)
			 (choose receptor-shapes)
			 r))
	   (receptor-mixer-values m)))
   (min 1 (+ (param "world-mutate-power-mul")
			 (receptor-mixer-power m)))))

(define (receptor-mixer-decrease-power m delta)
  (receptor-mixer-modify-power
   m (max
	  mixer-minimum
	  (- (receptor-mixer-power m)
		 (* delta (param "world-mutate-power-drop"))))))

(define (probrnd probs)
  (define (_ val prob-lis n)
    (let ((nval (- val (car prob-lis))))
      (if (or (< nval 0) (null? (cdr prob-lis)))
	  n (_ nval (cdr prob-lis) (+ n 1)))))
  (_
   (* (rndf)
      (foldl (lambda (p r) (+ p r)) 0 probs))
   probs 0))

(define (receptor-mixer-choose m)
  (list-ref
   receptor-shapes
   (probrnd (receptor-mixer-values
			 (receptor-mixer-clamp m)))))

(define (mixer->receptors m)
  (if (eq? (receptor-mixer-game-type m) "shape")
	  (build-list
	   num-host-receptors
	   (lambda (_)
		 (receptor-mixer-choose m)))
	  (shuffle (receptor-mixer-values m))))

(define (calculate-suceptibility a b)
  (/
   (foldl
	(lambda (at r)
	  (+ (foldl
		  (lambda (bt r)
			(if (eq? at bt) (+ r 1) r))
		  0 b) r))
	0 a)
   (length b)))
