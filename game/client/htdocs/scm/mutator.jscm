;; -*- mode: scheme; -*-
;; ViruscraftII Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "scm/shape-button.jscm")
(load "scm/dice-button.jscm")

(define (make-mutator type buttons event)
  (list type buttons event))

(define (mutator-type m) (list-ref m 0))
(define (mutator-buttons m) (list-ref m 1))
(define (mutator-event m) (list-ref m 2))

(define (build-mutator game-type)
  (make-mutator
   (if (or (eq? game-type "shape")
		   (eq? game-type "multivariant"))
	   "shape" "mutator")
   (cond
	((or (eq? game-type "shape")
		 (eq? game-type "multivariant"))
	 (let ((mid (+ (- (/ (- screen-width panel-width) 2) 75)
				   (if installation-mode 0 100))))
	   (list
		(build-shape-button (- mid 225) 600 "cir")
		(build-shape-button (- mid 75)  600 "tri")
		(build-shape-button (+ mid 75)  600 "gui")
		(build-shape-button (+ mid 225) 600 "squ"))))
	(else
	 (build-dice-button 500 550)
	 ))
   #f))

(define (mutator-render m ctx)
  (cond
   ((eq? (mutator-type m) "shape")
	(for-each
	 (lambda (button)
	   (shape-button-render button ctx))
	 (mutator-buttons m)))
   (else
	(dice-button-render (mutator-buttons m) ctx))
   ))

(define (mutator-update-mouse m state x y)
  (let ((buttons
		 (cond
		  ((eq? (mutator-type m) "shape")
		   (play-sound "shape-click.wav")
		   (map
			(lambda (button)
			  (shape-button-update-mouse button state x y))
			(mutator-buttons m)))
		  (else
		   (play-sound "dice-click.wav")
		   (dice-button-update-mouse (mutator-buttons m) state x y)))))
	
	(make-mutator
	 (mutator-type m)
	 buttons
	 (cond
	  ((eq? (mutator-type m) "shape")
	   (foldl
		(lambda (button r)
		  (if (shape-button-clicked button)
			  (shape-button-shape button)
			  r))
		#f buttons))
	  (else
	   (dice-button-clicked buttons))))))

(define (mutator-update-sensor m sensor-state)
  (let ((buttons
	 (map
	  (lambda (button)
	    (shape-button-update-sensor button sensor-state))
	  (mutator-buttons m))))
	
    (make-mutator
     (mutator-type m)
     buttons
     (foldl
      (lambda (button r)
	(if (shape-button-clicked button)
	    (shape-button-shape button)
	    r))
      #f buttons))))

(define (mutator-update m mixer time delta)
  (make-mutator
   (mutator-type m)
   (cond
	((eq? (mutator-type m) "shape")
	 (map
	  (lambda (button)
		(shape-button-update button mixer time delta))
	  (mutator-buttons m)))
	(else (dice-button-update (mutator-buttons m) mixer time delta)))
   #f))

;; ------------------------------------------

(define (fn-list a b)
  (build-list
   num-shape-levels
   (lambda (i)
	 (string-append "button " a " " i b ".png"))))

(define (mutator-filenames)
  (map
   (lambda (fn)
	 (string-append "buttons/" fn))
   (append
	(fn-list "tri" "")
	(fn-list "cir" "")
	(fn-list "gui" "")
	(fn-list "squ" "")
	(fn-list "tri" " grey")
	(fn-list "cir" " grey")
	(fn-list "gui" " grey")
	(fn-list "squ" " grey")
	(list
	 "dice tri.png"
	 "dice cir.png"
	 "dice gui.png"
	 "dice squ.png"
	 "dice shadow 1.png"
	 "dice shadow 2.png"
	 "dice shadow 3.png"
	 "dice shadow 4.png"))))


	
