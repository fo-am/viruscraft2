;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (make-receptor pos col)
  (list pos col))

(define (receptor-pos r) (list-ref r 0))
(define (receptor-col r) (list-ref r 1))

;;;;;;;;;;;;;;;;;;;;;;

(define host-animation-idle 0)
(define host-animation-infected 1)

(define host-animation
  (list
   (make-anim-move "host" "host" '() (list "1" "12" "2" "23" "3" "23" "2" "12") 12 (vec2 0 0))
   (make-anim-move "host" "host-infected" '() (list  "1" "12" "2" "23" "3" "23" "2" "12") 12 (vec2 0 0))
   ))

(define (make-host pos receptors)
  (append
   (make-entity
    (generate-entity-id!)
    "host"
    pos (random (* 2 Math.PI)) (vec2 128 128) "left" (rndf)
    (anim-load-frames "0" host-animation)
    0 host-animation-idle 0 0 pos #f 0 0 (vec2 0 0))
   (list
    'state-idle
    receptors
    (receptors-paint
     (map
      (lambda (r)
		(find-image (string-append r ".png")))
      receptors) #f)
    #f
	;; initial nudge to look alive
	(rndcirc2d))))

(define (host-state h) (list-ref h (+ entity-size 0)))
(define (host-modify-state h v) (list-replace h (+ entity-size 0) v))
(define (host-receptors h) (list-ref h (+ entity-size 1)))
(define (host-receptor-image h) (list-ref h (+ entity-size 2)))
(define (host-virus h) (list-ref h (+ entity-size 3)))
(define (host-modify-virus h s) (list-replace h (+ entity-size 3) s))
(define (host-dir h) (list-ref h (+ entity-size 4)))
(define (host-modify-dir h s) (list-replace h (+ entity-size 4) s))

(define (host-start-pos)
  (vec2 (random screen-width) (random screen-height)))

;; refactor with virus one
(define (host-shove h host-list)
  (let ((cell-size (param "host-cell-size")))
    (foldl
     (lambda (host r)
       (if (eq? (entity-id host) (entity-id h))
	   r
	   (let ((v (v2sub (entity-pos host) (entity-pos h))))
	     (if (< (v2mag v) cell-size)
		 (v2add (v2mul (v2normalise v) -1) r)
		 r))))
     (vec2 0 0)
     host-list)))

(define (host-update-state h new-virus delta)
  (let ((state (host-state h)))		
	(entity-modify-timer   
	 ;; the host's state machine...
	 (cond
	  ;; at any time switch to infected if a virus attaches
	  (new-virus
	   (host-modify-state
		(entity-modify-timer h 0)
		'state-infected))

	  ((eq? state 'state-idle)
	   (if (> (entity-timer h) (+ (rndf) (param "host-spawn-rate")))
		   (host-modify-state (entity-modify-timer h 0) 'state-divide)
		   h))
	  ((eq? state 'state-divide)
	   (host-modify-state h 'state-died))
	  ((eq? state 'state-died)
	   h) 
	  ((eq? state 'state-infected)
	   (if (> (entity-timer h) (param "host-infected-death-time"))
		   (host-modify-state h 'state-died)
		   (entity-modify-clip h host-animation-infected)))
	  (else h))   
	 (+ (entity-timer h)
		;; speed up heart rate when infected!
		(if (eq? state 'state-infected)
			(* delta 2) delta)))))

(define (host-update h time delta world new-virus)
  (let ((virus (host-virus h))
		(move (v2add	   
			   (world-petri-vel (entity-pos h))
			   (host-shove h (world-hosts world)))))
    (host-modify-virus
	 (host-modify-dir
	  (entity-rotate-to-face
	   (entity-modify-anim-speed
		(entity-modify-pos
		 (host-update-state h new-virus delta)
		 ;; update the position
		 (v2add (entity-pos h) (host-dir h)))
		;; walk speed
		(* (v2mag (host-dir h)) 1))
	   ;; facing angle
	   (vec2 (vy (host-dir h)) (- (vx (host-dir h)))) 1)
	  ;; dir
	  (v2lerp
	   (host-dir h)
	   (if (< (v2mag move) 0.001)
		   (if (< (rndf) 0.1)
			   (vmul (rndcirc2d) 10)
			   (v2mul (host-dir h) 0.99))
		   move)
	   0.01))
	 ;; update the virus
	 (cond
	  ;; update the host postion if we have one
	  (virus	    
	   (entity-modify-pos virus (entity-pos h)))
	  ;; store the infected host if we have one
	  (new-virus
	   ;; tell it it's infected...
	   (entity-modify-pos
		(entity-modify-offset
		 (host-modify-state new-virus 'state-attached)
		 ;; add the offset to the virus
		 (v2sub (entity-pos new-virus) (entity-pos h)))
		(entity-pos h)))
	  (else virus)))))

;; overload this to render the virus if we have one
(define (host-render h ctx)
  (let ((virus (host-virus h)))
    (entity-render h ctx)

    (ctx.save)
    (ctx.translate
     (- (vx (entity-pos h)) 50)
     (- (vy (entity-pos h)) 50))       
    (ctx.drawImage (host-receptor-image h) 0 0)
    (ctx.restore)
    
    (when virus (virus-render virus ctx))))
