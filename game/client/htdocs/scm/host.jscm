;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (make-receptor pos col)
  (list pos col))

(define (receptor-pos r) (list-ref r 0))
(define (receptor-col r) (list-ref r 1))

;;;;;;;;;;;;;;;;;;;;;;

(define host-animation-idle 0)

(define host-animation
  (list
   (make-anim-move "host" "host" '() (list "1" "2" "3") 8 (vec2 0 0))
   ))

(define (make-host pos receptors)
  (append
   (make-entity
	(generate-entity-id!)
	"host"
	pos 0 (vec2 64 64) "left" (rndf)
	(anim-load-frames "0" host-animation)
	0 host-animation-idle 0 0 pos #f 0 0 (vec2 0 0))
   (list
	'state-idle
	receptors))))

(define (host-state h) (list-ref h (+ entity-size 0)))
(define (host-modify-state h v) (list-replace h (+ entity-size 0) v))
(define (host-receptors h) (list-ref h (+ entity-size 1)))

(define (host-start-pos)
  (vec2 (random screen-width) (random screen-height)))

;; refactor with virus one
(define (host-shove h host-list)
  (let ((cell-size (param "host-cell-size")))
	(foldl
	 (lambda (host r)
	   (if (eq? (entity-id host) (entity-id h))
		   r
		   (let ((v (v2sub (entity-pos host) (entity-pos h))))
			 (if (< (v2mag v) cell-size)
				 (v2add (v2mul (v2normalise v) -1) r)
				 r))))
	 (vec2 0 0)
	 host-list)))

(define (host-update h time delta world)	  
  (let ((state (host-state h)))
	(entity-modify-pos	 
	 (entity-modify-timer
	  ;; the host's state machine...
	  (cond
	   ((eq? state 'state-idle)
		(if (> (entity-timer h) (+ (rndf) (param "host-spawn-rate")))
			(host-modify-state (entity-modify-timer h 0) 'state-divide)
			h))
	   ((eq? state 'state-divide)
		(host-modify-state h 'state-died))
	   ((eq? state 'state-died)
		h)
	   (else h))   
	  (+ (entity-timer h) delta))
	 
	 (v2add (entity-pos h)
			(v2add
			 (v2mul (world-fluid-vel (entity-pos h) time) 1.0)
			 (host-shove h (world-hosts world)))))))
