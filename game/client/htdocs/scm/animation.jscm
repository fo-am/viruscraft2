;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (make-anim-move id name components frames speed offset) (list id name components frames speed offset))
(define (anim-move-id a) (list-ref a 0))
(define (anim-move-name a) (list-ref a 1))
(define (anim-move-components a) (list-ref a 2))
(define (anim-move-frames a) (list-ref a 3))
(define (anim-move-speed a) (list-ref a 4))
(define (anim-move-offset a) (list-ref a 5))

(define (anim-build-path component move frame type)
  (string-append 
   "sprites/" (anim-move-id move) "/" 
   (anim-move-name move)
   frame component type ".png"))

(define (anim-move->filenames l component move types)
  (foldl
   (lambda (frame r)
	 (foldl
	  (lambda (type r)
		(append
		 (list (anim-build-path component move frame type))
		 r))
	  r types))
   l (anim-move-frames move)))

(define (anim->filenames anim types)
  (foldl
   (lambda (move r)
     (if (null? (anim-move-components move))
	 (anim-move->filenames r "" move (list ""))
	 (foldl
	  (lambda (component r)
		;; hardcoded types - fix
	    (anim-move->filenames r component move types))
	  r
	  (anim-move-components move))))
   '()
   anim))

(define (make-anim-clip speed frames offset)
  (list speed frames offset))

(define (anim-clip-speed c) (list-ref c 0))
(define (anim-clip-frames c) (list-ref c 1))
(define (anim-clip-offset c) (list-ref c 2))

;; now returns list of images to draw over each other
(define (anim-clip-frame-looped clip facing n)
   (list-ref 
	(anim-clip-frames clip)
	(modulo n (length (anim-clip-frames clip)))))

;; todo component-type-list
(define (anim-load-frames component-type-list anim)
  (map
   (lambda (move)
     ;; bolting speed onto the front of the frame list
     ;; so we can have different fps for different clips
     (make-anim-clip
      (anim-move-speed move)
      (map 
       (lambda (frame)
		 (if (null? (anim-move-components move))
			 (list (find-image (anim-build-path "" move frame "")))
			 (map2
			  (lambda (component type)
				(find-image (anim-build-path component move frame type)))
			  (anim-move-components move)
			  component-type-list)))
       (anim-move-frames move))
      (anim-move-offset move)))
   anim))

