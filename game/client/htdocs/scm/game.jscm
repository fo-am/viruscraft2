;; -*- mode: scheme; -*-
;; ViruscraftII Copyright (C) 2021 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "scm/maths.jscm")
(load "scm/random.jscm")
(load "scm/nightjar.jscm")
(load "scm/local-storage.jscm")

(define player-name "???")
(define end-game-time 7)
(define installation-mode #f)
(define cheat-mode #t)

;; delete old params if they are here
;(let ((v (local-load "viruscraft2-version")))
;  (when v
;		(msg "nuking local params")
;		(local-nuke)))

(define (param name)
  (string->number (local-get-param-fast "viruscraft2" name)))

(define (string-param name)
  (local-get-param-fast "viruscraft2" name))

(define (stage-reached)
  (string->number (local-get-param "viruscraft2" "player-stage-reached")))

(define (player-id)
  (string->number (local-get-param "viruscraft2" "player-id")))

(define (help-seen)
  (string->number (local-get-param "viruscraft2" "help-seen")))

(define (inc-help-seen!)
  (local-set-param "viruscraft2" "help-seen" (+ (help-seen) 1)))

(local-setup-params-fast
 "viruscraft2" 
 (list
  (make-param "start-level" 1 "seconds")
  (make-param "world-level-time" 60 "seconds")
  (make-param "world-num-levels" 5 "levels")
  (make-param "world-max-viruses" 30 "viruses")
  (make-param "world-start-hosts" 1 "host cells")
  (make-param "world-infection-period" 0.5 "seconds")
  (make-param "world-mutate-power-mul" 0.1 "units")
  (make-param "world-mutate-power-drop" 0.1 "units")
  (make-param "host-receptor-count" 3 "receptors")
  (make-param "host-spawn-count" 2 "babies")
  (make-param "host-spawn-radius" 10 "pixels")
  (make-param "host-spawn-rate" 3 "seconds") 
  (make-param "host-max-population" 20 "cells")
  (make-param "host-cell-size" 100 "pixels")
  (make-param "host-infected-death-time" 2 "seconds")
  (make-param "virus-receptor-count" 5 "receptors")
  (make-param "virus-size" 120 "pixels")
  (make-param "virus-max-age" 30 "seconds")
  (make-param "virus-cell-spawn-count" 5 "viruses")
  (make-param "petri-radius" 350 "pixels")
  (make-param "fluid-speed" 400 "x seconds")
  (make-param "fluid-scale" 0.002 "units")
  (make-param "fluid-strength" 4 "units")
  (make-param "model-mutation-rate" 20 "percent")
  (make-param "model-pop-threshold" 50 "percent")
  (make-param "model-population-size" 100 "individuals")
  (make-param "model-hosts-per-update" 3 "hosts")
  ))

(define (new-player?)
  (not (local-exists? "viruscraft2-params")))

(define (init-player-params!)
  (local-setup-params
   "viruscraft2" 
   (list
	(make-param "player-stage-reached" 0 "stage")
	(make-param "player-id" -1 "number")
	(make-param "help-seen" -1 "number"))))

(define params-version 22)

(define (init-params!)
  (let ((v (local-load "viruscraft2-version")))
	(msg "checking params")
	(when (or (not v) (< v params-version))
		  (msg "resetting params")
		  (local-nuke)
		  (init-player-params!)
		  (local-save "viruscraft2-version" params-version)
		  )))


;;(define start-level (param "start-level"))
;;(define installation-mode #t)

(load "scm/ordered-list.jscm")
(load "scm/particles.jscm")
(load "scm/animation.jscm")
(load "scm/entity.jscm")
(load "scm/entity-list.jscm")
(load "scm/entity-renderer.jscm")

(load "scm/scores.jscm")
(load "scm/help-bubbles.jscm")
(load "scm/receptors.jscm")
(load "scm/model.jscm")
(load "scm/virus.jscm")
(load "scm/host.jscm")
(load "scm/world.jscm")
(load "scm/levels.jscm")
(load "scm/mutator.jscm")
(load "scm/game-help.jscm")

(define (button-sound)
  (play-sound "button.wav"))

(define default-button-x (- (/ screen-width 2) 150))
(define default-button-y (+ (/ screen-height 2) 100))
(define default-button-width 300)
(define default-button-height 80)

(define button-gap 250)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stubs

(define (make-new-demo)
  0)

(define (demo-update game-data time delta)
  game-data)

(define (demo-render game-data ctx)
  0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (register-new-game c stage)
  (register-game c (player-id) stage 1 3))

(define (register-game c player-id stage level lives)
  (msg "started register game")
  (server-call-mutate
   "game"
   (list (list "player_id" player-id))
   (lambda (c game-id)	 
	 (msg (list "game id:" game-id))
     (nightjar-game-screen c game-id stage level lives)))
  (msg "waiting for game to register...")
  (game-modify-data
   (lambda (d)	 
	 (world-modify-state d "state-waiting-for-restart"))
   c))

(define (score-list game-id stage level)
  (list
   (list "game_id" game-id)
   (list "stage" stage)
   (list "level" level)
   (list "survived" (scores-survived))
   (list "duration" (scores-duration))
   (list "mutations" (scores-mutations))
   (list "hosts_spawned" (scores-hosts-spawned))
   (list "viruses_spawned" (scores-viruses-spawned))
   (list "infections" (scores-infections))
   (list "max_hosts" (scores-max-hosts))
   (list "max_viruses" (scores-max-viruses))
   (list "final_hosts" (scores-final-hosts))
   (list "final_viruses" (scores-final-viruses))))

(define (save-scores! game-id stage level)
  (msg "saving scores")
  ;; WTAF
  (server-call "score" (score-list game-id stage level)))

;; (define (send-update-scores c)
;;   (server-call-mutate
;;    "score"
;;    (score-list c)
;;    (lambda (c score-pos)
;; 	 (if ditto.load_resource_static
;; 		 (nightjar-end c 0)
;; 		 (nightjar-enter-name c (JSON.parse score-pos)))))  
;;   c)


(define (nightjar-intro c)
  (if (new-player?)
	  (game-modify-render
	   (lambda (ctx)
		 (demo-render (game-data c) ctx)
		 (set! ctx.fillStyle text-col)		
		 (set! ctx.font "normal 120pt Dosis")
		 (wrap-text ctx "VIRUSCRAFT II" 0 200 1500 100)		
		 (set! ctx.font "normal 30pt Dosis")
		 (wrap-text ctx "Are you happy for us to store your player info (scores and level reached) on your browser?" 0 340 1200 60)
		 (set! ctx.font "normal 30pt Dosis")
		 )
	   
	   (game-modify-buttons
		(list
		 
		 (rect-button
		  "PLAY" 
		  default-button-x
		  default-button-y
		  default-button-width default-button-height
		  "jumpy"
		  (lambda (c)
			(init-player-params!)
			(button-sound)
			(nightjar-main c)))
		 
		 )
		c))
	  (nightjar-main c)))

(define (register-player!)
  (init-params!)
  (cond
   ((eq? (player-id) -1)
	(server-call-mutate
	 "player"
	 '() 
	 (lambda (c id)	 
	   (msg (list "new player id" id))
	   ;; save it...
	   (local-set-param "viruscraft2" "player-id" id)
	   c)))
   (else
	(msg (list "returning player id" (player-id)))
	(when (eq? player-name "???")
		  (server-call-mutate
		   "get-player-name"
		   (list (list "player_id" (player-id)))
		   (lambda (c name) 
			 (msg (list "player name loaded:" (JSON.parse name)))
			 ;; save it...
			 (set! player-name (JSON.parse name))
			 c)))
	)))

(define (nightjar-main c)
  (register-player!)
  (game-modify-mouse-hook
   (lambda (state c) c)
   (game-modify-timeout
	(lambda ()
	  (when (not ditto.load_resource_static)	
			(set! window.location "/")))
	(game-modify-data
	 (lambda (d)
	   (make-new-demo))
	 (game-modify-update
	  (lambda (t c)
		(game-modify-data
		 (lambda (d)
		   (demo-update (game-data c) (/ t 1000) (game-delta c)))
		 c))
	  (game-modify-render
	   (lambda (ctx)
		 (demo-render (game-data c) ctx)
		 (set! ctx.fillStyle text-col)		
		 (set! ctx.font "normal 120pt Dosis")
		 (wrap-text ctx "VIRUSCRAFT II" 0 200 1500 100)		
		 (set! ctx.font "normal 30pt Dosis")
		 )
	   
	   (game-modify-buttons
		(list
		 (rect-button
		  "SHAPE"
		  (+ default-button-x 200)
		  (- default-button-y 200)
		  default-button-width default-button-height
		  "jumpy"
		  (lambda (c)
			(button-sound)
			(register-new-game c 0)))

		 (rect-button
		  (if (or cheat-mode (> (stage-reached) 0)) "MUTATE" "????")
		  (+ default-button-x 200)
		  (- default-button-y 100)
		  default-button-width default-button-height
		  "jumpy"
		  (lambda (c)
			(button-sound)
			(if (or cheat-mode (> (stage-reached) 0))
			    (register-new-game c 1)
			    c)))

		 (rect-button
		  (if (or cheat-mode (> (stage-reached) 1)) "MULTIVARIANT" "????")
		  (+ default-button-x 200)
		  (+ default-button-y 0)
		  default-button-width default-button-height
		  "jumpy"
		  (lambda (c)
			(button-sound)
			(if (or cheat-mode (> (stage-reached) 1))
			    (register-new-game c 2)
				c)))

		 (rect-button
		  (if (or cheat-mode (> (stage-reached) 2)) "HIDDEN" "????")
		  (+ default-button-x 200)
		  (+ default-button-y 100)
		  default-button-width default-button-height
		  "jumpy"
		  (lambda (c)
			(button-sound)
			(if (or cheat-mode (> (stage-reached) 2))
			    (register-new-game c 3)
				c)))


		 (rect-button
		  "HOW TO PLAY"
		  (- default-button-x 200)
		  (- default-button-y 100)
		  default-button-width default-button-height
		  "jumpy"
		  (lambda (c)
			(button-sound)
			(nightjar-about c)))
		 
		 (rect-button
		  "LEADERBOARD"
		  (- default-button-x 200)
		  (+ default-button-y 0)
		  default-button-width default-button-height
		  "jumpy"
		  (lambda (c)
			(button-sound)
			(msg (eq? player-name "???"))
			(cond
			 ((eq? player-name "???")
			  (nightjar-enter-name c 0))
			 (else
			  (server-call-mutate
			   "hiscores"
			   (list)
			   (lambda (c scores)
				 (msg scores)
				 (nightjar-hiscores c (JSON.parse scores))))
			  c))))
		 
		 )
		c)))))))


(define (nightjar-about c)
  (game-modify-render
   (lambda (ctx)
	 ;;(ctx.drawImage (find-image "crab2.png") 1240 550)
	 (demo-render (game-data c) ctx)

	 (set! ctx.font "normal 75pt Dosis")
	 (wrap-text ctx "HOW TO PLAY" 0 100 1300 100)
	 (set! ctx.font "normal 25pt Dosis")
	 
	 (wrap-text-left ctx "Blah Blah" 300 150 1000 40)

	 ;;(ctx.drawImage (find-image "logos.png") 300 510)

	 ;;(set! ctx.globalAlpha 0.5)
	 ;;      (ctx.drawImage (find-image "wasp.jpg") 860 290)

	 (set! ctx.font "normal 30pt Dosis")


	 ;;(set! ctx.globalAlpha 1.0)      

	 ;; (ctx.drawImage (find-image "title-wildflowers1.png") -50 290)
	 ;; (ctx.drawImage (find-image "title-wildflowers2.png") 1280 340)
	 
	 )

   (game-modify-buttons
	(list
	 (rect-button
	  "BACK"
	  (- default-button-x 200)
	  (+ default-button-y 50)
	  default-button-width 
	  default-button-height 
	  "jumpy"
	  (lambda (c)
		(button-sound)
		(nightjar-main c))))
	c)))

(define (nightjar-game-screen c game-id stage level lives)
  (game-modify-data
   (lambda (d)
	 (msg (list "building world" game-id))
	 (build-world stage level game-id (/ (game-time c) 1000) lives))
   (game-modify-mouse-hook
	(lambda (state c)
	  (game-modify-data
	   (lambda (d)
		 (world-update-mouse (game-data c) state (game-mx c) (game-my c) (/ (game-time c) 1000)))
	   c))   
	(game-modify-render
	 (lambda (ctx)
	   (world-render (game-data c) ctx (/ (game-time c) 1000))
	   (set! ctx.font "normal 20pt Dosis")
	   )
	 (game-modify-update
	  (lambda (t c)
		(let ((w (game-data c)))
		  (cond
		   ((eq? (world-state w) "state-restart-game")
			;; exit game
			(save-scores! game-id (world-stage w) (world-level w))
			(nightjar-main c)) 		   
		   ((eq? (world-state w) "state-restart-level")
			;; try again
			(nightjar-game-screen c game-id (world-stage w) (world-level w) (- (world-lives w) 1)))
		   ((eq? (world-state w) "state-new-level")
			;; new level
			(msg "new level")
			(nightjar-game-screen c game-id (world-stage w) (+ (world-level w) 1) 3))
		   ((eq? (world-state w) "state-new-stage")
			;; todo: END OF GAME
			;; if we haven't reached this stage already
			(when (< (stage-reached) (+ (world-stage w) 1))
				  ;; record the new stage reached
				  (local-set-param
				   "viruscraft2" "player-stage-reached"
				   (+ 1 (world-stage w))))
			;; new stage
			(nightjar-game-screen c game-id (+ (world-stage w) 1) 1 3))
		   ;; don't do anything...
		   ((eq? (world-state w) "state-waiting-for-restart") c)		   
		   (else			   
			(game-modify-data
			 (lambda (d)
			   ;; normal update
			   (world-update d (/ t 1000) (game-delta c))
			   )
			 c)))))
	  (game-modify-buttons
	   (append
		(list
		 (rect-button
		  "QUIT" 20 (+ default-button-y 185) 60 60 #f
		  (lambda (c)
			(button-sound)
			(let ((w (game-data c)))
			  (msg "recording level time")
			  (update-scores-duration! (dbg (world-level-time w)))
			  (update-scores-final-hosts! (length (world-hosts w)))
			  (update-scores-final-viruses! (length (world-viruses w)))
			  (save-scores! game-id (world-stage w) (world-level w))
			  (nightjar-main game))))

		 (rect-button
		  "?" 100 (+ default-button-y 185) 60 60 #f
		  (lambda (c)
			(button-sound)
			(set! help-stack (build-help
							  (world-game-type (game-data c))
							  (/ (game-time c) 1000)))
			c))
		 
		 )) c))))))

(define scores-anim-t 0)
(define scores-anim-nests 0)
(define scores-anim-activity 0)
(define scores-anim-timing 0.10) 

(define (nightjar-end c rank)
  (set! scores-anim-pos 0)
  (set! scores-anim-nests -1)
  (set! scores-anim-activity -1)
  (game-modify-mouse-hook
   (lambda (state c) c)
   (game-modify-render
	(lambda (ctx)
	  (set! ctx.fillStyle text-col)      
	  (set! ctx.font "normal 30pt Dosis")
	  
	  (let ((n (game-data c)))		
		(set! ctx.fillStyle highlight2-col)
		(ctx.fillRect (- (/ screen-width 2) 330) 50 660 280)
		(set! ctx.fillStyle text-col)      
		
		(ctx.fillText "YOUR TOTAL SCORE:" 500 300)
		(set! ctx.font "bold 30pt Dosis")	
		(set! ctx.font "normal 30pt Dosis")
		)
	  )
	(game-modify-update
	 (lambda (t c)
	   c)
	 (game-modify-buttons
	  (append
	   (list
		
		(rect-button
		 "PLAY AGAIN"
		 (- default-button-x (if ditto.load_resource_static 200 350))
		 default-button-y
		 default-button-width default-button-height
		 "jumpy"
		 (lambda (c)
		   (button-sound)
		   (register c "none")
		   ))

		(rect-button
		 "QUIT"
		 (+ default-button-x (if ditto.load_resource_static 200 350))
		 default-button-y
		 default-button-width 
		 default-button-height 
		 "jumpy"
		 (lambda (c)
		   (button-sound)
		   (nightjar-intro game))))

	   (if ditto.load_resource_static
		   '()
		   (list
			(rect-button
			 "LEADERBOARD"
			 default-button-x
			 default-button-y
			 default-button-width default-button-height
			 "jumpy"
			 (lambda (c)
			   (button-sound)
			   (server-call-mutate
				"hiscores"
				(list)
				(lambda (c scores)	      
				  ;; restart the demo!
				  (nightjar-hiscores
				   (game-modify-update
					(lambda (t c)
					  ;; update loop
					  (game-modify-data
					   (lambda (d)
						 (demo-update (game-data c) (/ t 1000) (game-delta c)))
					   c))
					;; init the demo
					(game-modify-data
					 (lambda (d)
					   (make-new-demo))
					 c))
				   (JSON.parse scores))))
			   c)))))
	  
	  c)))))

(define col1 -350)
(define col2 -125)
(define col3 125)
(define col4 350)

(define (nightjar-hiscores c scores)
  (game-modify-render
   (lambda (ctx)
	 (demo-render (game-data c) ctx)
	 (set! ctx.fillStyle text-col)      
	 (set! ctx.font "normal 75pt Dosis")
	 (wrap-text ctx "LEADERBOARD" 0 100 1300 100)
	 (set! ctx.font "normal 30pt Dosis")
	 
     (wrap-text ctx "NAME" col1 170 1000 1)
     (wrap-text ctx "STAGE" col2 170 1000 1)
     (wrap-text ctx "LEVEL" col3 170 1000 1)
     (wrap-text ctx "DURATION" col4 170 1000 1)
     
     (when scores
	   (index-for-each
	    (lambda (i e)
	      (cond
	       ((zero? i)
			(set! ctx.font "normal 30pt pompiere")
			(text-flashy-render ctx (list-ref e 0) col1 (+ 220 (* 45 i)) (game-time c))
			(text-flashy-render ctx (number->string (+ (list-ref e 1) 1)) col2 (+ 220 (* 45 i)) (game-time c))
			(text-flashy-render ctx (number->string (list-ref e 2)) col3 (+ 220 (* 45 i)) (game-time c))
			(text-flashy-render ctx (string-append (/ (floor (* (list-ref e 3) 100)) 100) " secs") col4 (+ 220 (* 45 i)) (game-time c))
			(set! ctx.font "normal 30pt pompiere"))
	       (else
			(wrap-text ctx (list-ref e 0) col1 (+ 220 (* 45 i)) 1000 1)
			(wrap-text ctx (number->string (+ (list-ref e 1) 1)) col2 (+ 220 (* 45 i)) 1000 1)
			(wrap-text ctx (number->string (list-ref e 2)) col3 (+ 220 (* 45 i)) 1000 1)
			(wrap-text ctx (string-append (/ (floor (* (list-ref e 3) 100)) 100) " secs") col4 (+ 220 (* 45 i)) 1000 1))))
	    scores))

	 ;; (ctx.drawImage (find-image "title-wildflowers1.png") -50 290)
	 ;; (ctx.drawImage (find-image "title-wildflowers2.png") 1280 340)
	 
	 )
   (game-modify-buttons
	(list
	 (rect-button
	  "BACK"
	  default-button-x
	  (+ default-button-y 85)
	  default-button-width 
	  default-button-height 
	  "jumpy"
	  (lambda (c)
		(button-sound)
		(nightjar-intro game))))
	c)))

(define (type-into str ch)
  (car
   (foldl
	(lambda (c r)
	  (if (and (not (cadr r)) (eq? c "?"))
		  (list (string-append (car r) ch) #t)
		  (list (string-append (car r) c) (cadr r))))
	(list "" #f)
	(str.split ""))))

(define (type-into-delete str)
  (car (foldl
		(lambda (c r)
		  ;;(console.log (list c r))
		  (if (and (not (cadr r)) (not (eq? c "?")))
			  (list (string-append "?" (car r)) #t)
			  (list (string-append c (car r)) (cadr r))))
		(list "" #f)
		(reverse (str.split "")))))

(define (type-username ch c)
  (set! player-name (type-into player-name ch)))

(define (type-delete c)
  (set! player-name (type-into-delete player-name)))


(define (qwertypos-x i)  
  (cond ((< i 10) i)
		((and (> i 9) (< i 19)) (- i 10))
		(else (- i 19))))

(define (qwertypos-y i)  
  (cond ((< i 10) 0)
		((and (> i 9) (< i 19)) 1)
		(else 2)))

(define (nightjar-enter-name c rank)
  (game-modify-mouse-hook
   (lambda (state c) c)
   (game-modify-update
	(lambda (t c) c)
	(game-modify-render
	 (lambda (ctx)
	   (set! ctx.font "normal 30pt Dosis")
	   (wrap-text ctx "Enter your name for the leaderboard" 0 70 1000 70)
	   (set! ctx.font "normal 50pt Dosis")
	   (wrap-text ctx player-name 0 150 1000 70)
	   (set! ctx.font "normal 30pt Dosis"))

	 (game-modify-buttons
	  (append
	   (index-map
		(lambda (i ch)
		  (let ((x (+ (cond ((eq? (qwertypos-y i) 0) 250)
							((eq? (qwertypos-y i) 1) 300)
							(else 380))
					  (* (qwertypos-x i) 120)))
				(y (+ 220 (* (qwertypos-y i) 130)))
				(img (find-image "sprites/hex-b-1.png")))
			(image-button ch x y #f
						  img
						  (lambda (c)
							(button-sound)
							(type-username ch c)
							c))))
		(list "Q" "W" "E" "R" "T" "Y" "U" "I" "O" "P"
			  "A" "S" "D" "F" "G" "H" "J" "K" "L"
			  "Z" "X" "C" "V" "B" "N" "M"))

	   (list
		(rect-button "DELETE" (- default-button-x 200) (+ default-button-y 150) default-button-width default-button-height "jumpy"
					 (lambda (c)
					   (button-sound)		      
					   (type-delete c)
					   c))

		(rect-button "DONE"  (+ default-button-x 200) (+ default-button-y 150) default-button-width default-button-height "jumpy"
					 (lambda (c)
					   (button-sound)
					   (server-call-mutate
						"player-name"
						(list
						 (list "player_id" (player-id))
						 (list "player_name" player-name))
						(lambda (c data)
						  (server-call-mutate
						   "hiscores"
						   (list)
						   (lambda (c scores)	      
							 (msg scores)
							 (nightjar-hiscores c (JSON.parse scores))))
						  c))
					   c))
		))
	  c)))))


(set! ctx.font "normal 75pt Dosis")
(set! ctx.fillStyle "#fff")

(load-sounds!
 (list "button.wav"))

(load-images!
 (append 
  (anim->filenames virus-animation (list ""))
  (anim->filenames virus-variant-animation (list ""))
  (anim->filenames host-animation (list "_cir" "_gui" "_squ" "_tri"))
  (virus-receptor-filenames)
  (mutator-filenames)
  (list
   "sprites/host/infected.png"
   "sprites/hex-b-1.png"
   "logos.png"
   "help-bubble.png"
   "help-bubble-n.png"
   "help-bubble-r.png"
   "help-bubble-lt.png"
   ))

 (lambda ()
   (start-game canvas ctx)))

